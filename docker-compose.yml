version: "3.9"

services:
  # frontend:
  #   container_name: frontend
  #   build:
  #     context: ./frontend
  #   ports:
  #     - "${FRONTEND_PORT}:${FRONTEND_PORT}"
  #   environment:
  #     AUTH_URL: ${AUTH_IP}:${AUTH_PORT}
  #     NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
  #     NEXTAUTH_URL: ${NEXTAUTH_URL}
  #     GITHUB_ID: ${GITHUB_ID}
  #     GITHUB_SECRET: ${GITHUB_SECRET}
  #     GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
  #     GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
  #   networks:
  #     - authentication-network
  #   restart: always

  # authentication:
  #   container_name: authentication
  #   image: alazidis/e-commerce-auth
  #   ports:
  #     - "${AUTH_PORT}:${AUTH_PORT}"
  #   environment:
  #     AUTH_PORT: ${AUTH_PORT}
  #     AUTH_POSTGRES_USERNAME: ${AUTH_POSTGRES_USERNAME}
  #     AUTH_POSTGRES_PWD: ${AUTH_POSTGRES_PWD}
  #     AUTH_POSTGRES_IP: ${AUTH_POSTGRES_IP}
  #     AUTH_POSTGRES_PORT: ${AUTH_POSTGRES_PORT}
  #   networks:
  #     - authentication-network
  #   restart: always

  authentication_db:
    container_name: pg_container
    image: postgres:15.3
    restart: always
    environment:
      POSTGRES_USER: ${AUTH_POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${AUTH_POSTGRES_PWD}
      POSTGRES_DB: USER
    ports:
      - "5432:5432"
    networks:
      - authentication-network
    volumes:
      - pgdata:/var/lib/postgresql/data

  pgadmin:
    container_name: pgadmin4_container
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:80"
    networks:
      - authentication-network
    volumes:
      - pgadmin-data:/var/lib/pgadmin

  mongo:
    container_name: mongo
    image: mongo
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: tickets
    networks:
      - tickets-network
    volumes:
     # - ./backend/tickets/database/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - /mongo-tickets:/data/db
  
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    depends_on: 
      - mongo
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: root
      ME_CONFIG_BASICAUTH_PASSWORD: root
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: root
      ME_CONFIG_MONGODB_URL: mongodb://root:root@mongo:27017/
    networks:
      - tickets-network
  
  kafka_admin:
   container_name: kafka_admin
   image: alazidis/kafka_admin_client
   environment:
    KAFKA_TOPICS: "testProducer,testTicketCreate"
    KAFKA_BROKERS: "kafka1:19092"
    KAFKA_REPLICATION_FACTOR: 1
    KAFKA_NUM_PARTITIONS: 1
    KAFKA_APP: 'kafka-admin-app'
   restart: always
   networks:
     - default
   depends_on:
     control-center:
       condition: service_started

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
    - default

  kafka1:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka1
    ports:
      - "8097:8097"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: EXTERNAL://localhost:8097,INTERNAL://kafka1:19092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    networks:
     - default
    restart: on-failure
    healthcheck:
        test: ["CMD", "ping", "-c","1", "localhost:8097"]
        interval: 30s
        timeout: 10s
        retries: 5

  # kafka2:
  #   image: confluentinc/cp-kafka:7.2.1
  #   container_name: kafka2
  #   ports:
  #     - "8098:8098"
  #   depends_on:
  #     - zookeeper
  #   environment:
  #     KAFKA_BROKER_ID: 2
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
  #     KAFKA_ADVERTISED_LISTENERS: EXTERNAL://localhost:8098,INTERNAL://kafka2:29092
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #   networks:
  #    - default
  #   restart: on-failure
  #   healthcheck:
  #       test: ["CMD", "ping", "-c","1", "localhost:8098"]
  #       interval: 30s
  #       timeout: 10s
  #       retries: 5

  # kafka3:
  #   image: confluentinc/cp-kafka:7.2.1
  #   container_name: kafka3
  #   ports:
  #     - "8099:8099"
  #   depends_on:
  #     - zookeeper
  #   environment:
  #     KAFKA_BROKER_ID: 3
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
  #     KAFKA_ADVERTISED_LISTENERS: EXTERNAL://localhost:8099,INTERNAL://kafka3:39092
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #   networks:
  #    - default
  #   restart: on-failure
  #   healthcheck:
  #       test: ["CMD", "ping", "-c","1", "localhost:8098"]
  #       interval: 30s
  #       timeout: 10s
  #       retries: 5
  
  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    hostname: control-center
    depends_on:
      - kafka1
    ports:
      - "9021:9021"
    expose:
      - 9021
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka1:19092'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      PORT: 9021
    networks:
    - default
    restart: always


volumes:
  pgadmin-data:
  pgdata:
  mongo-tickets:

networks:
  authentication-network:
    driver: bridge
  tickets-network: